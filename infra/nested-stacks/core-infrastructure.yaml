AWSTemplateFormatVersion: "2010-09-09"
Description: "Core infrastructure - VPC, subnets, security groups, and networking"

Parameters:
  StackName:
    Description: Name of the parent stack for resource naming
    Type: String
    Default: "pixel-streaming-at-scale"
    
  VPCName:
    Description: The name of the VPC being created
    Type: String
    Default: "metaverse"
    
  VPCCIDR:
    Description: The CIDR of the VPC being created
    Type: String
    Default: "10.0.0.0/16"
    
  Public0CIDR:
    Description: The CIDR of the first public subnet being created
    Type: String
    Default: "10.0.0.0/24"
    
  Public1CIDR:
    Description: The CIDR of the second public subnet being created
    Type: String
    Default: "10.0.1.0/24"
    
  Private0CIDR:
    Description: The CIDR of the first private subnet being created
    Type: String
    Default: "10.0.2.0/24"
    
  Private1CIDR:
    Description: The CIDR of the second private subnet being created
    Type: String
    Default: "10.0.3.0/24"

Mappings:
  AZRegions:
    ap-south-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]

Resources:
  # VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: !Ref VPCCIDR
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Ref VPCName

  # Public Subnets
  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: !Ref Public0CIDR
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: !Ref Public1CIDR
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  # Private Subnets
  PrivateSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: !Ref Private0CIDR
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: !Ref Private1CIDR
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  # Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-IGW'

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway
  ElasticIP0:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway0:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt ElasticIP0.AllocationId
      SubnetId: !Ref PublicSubnet0

  # Route Tables
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-route-table'

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable0:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-route-table-0'

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-route-table-1'

  PrivateRouteToInternet0:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable0
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway0

  PrivateRouteToInternet1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway0

  PrivateSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable0

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  # Network ACLs
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Application"
          Value: !Ref "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-nacl'

  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociation0:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet0
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  # Security Groups
  MatchmakerALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for matchmaker ALB"
      GroupName: !Sub "${StackName}-MatchmakerALBSG"
      SecurityGroupIngress: 
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 90
          ToPort: 90  
      VpcId: !Ref VPC

  FrontEndALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for Frontend ALB"
      GroupName: !Sub "${StackName}-FrontendALBSG"
      SecurityGroupIngress: 
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80  
      VpcId: !Ref VPC

  SignallingALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for signalling ALB"
      GroupName: !Sub "${StackName}-SignallingALBSG"
      SecurityGroupIngress: 
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80  
      VpcId: !Ref VPC

  MatchmakerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for matchmaker instance"
      GroupName: !Sub "${StackName}-MatchmakerInstanceSG"
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref MatchmakerALBSecurityGroup
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
        - SourceSecurityGroupId: !Ref MatchmakerALBSecurityGroup
          IpProtocol: "TCP"
          FromPort: 90
          ToPort: 90
      VpcId: !Ref VPC

  FrontEndInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for Frontend instance"
      GroupName: !Sub "${StackName}-FrontendInstanceSG"
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref FrontEndALBSecurityGroup
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
        - SourceSecurityGroupId: !Ref FrontEndALBSecurityGroup
          IpProtocol: "TCP"
          FromPort: 8080
          ToPort: 8080  
      VpcId: !Ref VPC

  SignallingInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for signalling instance"
      GroupName: !Sub "${StackName}-SignallingInstanceSG"
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref SignallingALBSecurityGroup
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
        - SourceSecurityGroupId: !Ref SignallingALBSecurityGroup
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80   
      VpcId: !Ref VPC

  # Add cross-reference for Matchmaker to Signalling communication
  MatchmakerToSignallingRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MatchmakerInstanceSecurityGroup
      SourceSecurityGroupId: !Ref SignallingInstanceSecurityGroup
      IpProtocol: "TCP"
      FromPort: 9999
      ToPort: 9999

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${StackName}-VPCId"

  PublicSubnet0Id:
    Description: Public Subnet 0 ID
    Value: !Ref PublicSubnet0
    Export:
      Name: !Sub "${StackName}-PublicSubnet0Id"

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${StackName}-PublicSubnet1Id"

  PrivateSubnet0Id:
    Description: Private Subnet 0 ID
    Value: !Ref PrivateSubnet0
    Export:
      Name: !Sub "${StackName}-PrivateSubnet0Id"

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${StackName}-PrivateSubnet1Id"

  MatchmakerALBSecurityGroupId:
    Description: Matchmaker ALB Security Group ID
    Value: !Ref MatchmakerALBSecurityGroup
    Export:
      Name: !Sub "${StackName}-MatchmakerALBSGId"

  FrontEndALBSecurityGroupId:
    Description: Frontend ALB Security Group ID
    Value: !Ref FrontEndALBSecurityGroup
    Export:
      Name: !Sub "${StackName}-FrontendALBSGId"

  SignallingALBSecurityGroupId:
    Description: Signalling ALB Security Group ID
    Value: !Ref SignallingALBSecurityGroup
    Export:
      Name: !Sub "${StackName}-SignallingALBSGId"

  MatchmakerInstanceSecurityGroupId:
    Description: Matchmaker Instance Security Group ID
    Value: !Ref MatchmakerInstanceSecurityGroup
    Export:
      Name: !Sub "${StackName}-MatchmakerInstanceSGId"

  FrontEndInstanceSecurityGroupId:
    Description: Frontend Instance Security Group ID
    Value: !Ref FrontEndInstanceSecurityGroup
    Export:
      Name: !Sub "${StackName}-FrontendInstanceSGId"

  SignallingInstanceSecurityGroupId:
    Description: Signalling Instance Security Group ID
    Value: !Ref SignallingInstanceSecurityGroup
    Export:
      Name: !Sub "${StackName}-SignallingInstanceSGId"
